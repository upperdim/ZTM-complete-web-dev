Figure out what functionality you might want and test it with Postman.

/                --> Root route, res = this is working
/signin          --> POST respond with success/fail
/register        --> POST respond with new user object
/profile/:userId --> GET  respond with user
/image           --> PUT  respond with updated user object (updates the uploaded photo count in order to determine rank)





res.json('signin') // this func is like `.send()` but in json format




* Always send sensitive information like passwords from frontend to the backend via HTTPs in POST body.
	POST requests are never cached
	POST request will not remain in the browser history
	No restriction on data length
* Store hashes of the passwords.


> Use slow hashing algorithms (~100ms). It won't bother user so much (fast enough for the user), 
  but hackers can't brute force with this algorithm. (slow enough to brute force).
  



CORS:
	if website A has a data that website B wants to access, 
	this type of request traditionally wouldn't be allowed under the browser's same origin policy aka same URI scheme. 
		( https://en.wikipedia.org/wiki/Same-origin_policy )

	However, by supporting CORS requests, website A can allow website C to access the data.
		( https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS )
